"""
Surgical Code Fixer - Claude-like precision for CloudWatch error fixes
Uses Agent with planner and editor tools for agentic workflow
"""

import json
import logging
import re
from typing import Dict, Any, Optional
from strands import Agent, tool
from strands.models import BedrockModel

logger = logging.getLogger(__name__)


@tool
def planner_tool(error_log: str, repo_name: str) -> str:
    """
    Analyze CloudWatch error log and identify exact location of the problem
    
    Args:
        error_log: CloudWatch error log content
        repo_name: Repository name from CloudWatch tags
    """
    return f"""
Based on the CloudWatch error log for repository {repo_name}, I need to identify:

1. The exact file path where the error occurred
2. The specific function/method name
3. The approximate line number if available
4. The error type (IAM permission, timeout, resource not found, etc.)
5. What recent change likely caused this

CloudWatch Error Log:
{error_log}

Please analyze this error and return a JSON object with this exact structure:
{{
    "file_path": "path/to/file.py",
    "function_name": "function_name", 
    "line_number": 123,
    "error_type": "IAM_PERMISSION|TIMEOUT|RESOURCE_NOT_FOUND|CONFIGURATION|OTHER",
    "error_description": "Brief description of the specific error",
    "likely_cause": "What recent change likely caused this error"
}}

Return ONLY the JSON object, no other text.
"""


@tool
def editor_tool(location_info: str, error_log: str, current_code: str) -> str:
    """
    Generate surgical fix for the specific function
    
    Args:
        location_info: JSON string with error location details
        error_log: CloudWatch error log content
        current_code: Current function code to fix
    """
    try:
        location = json.loads(location_info)
    except:
        location = {"error_type": "UNKNOWN", "error_description": "Parse error", "likely_cause": "Unknown"}
    
    return f"""
I am a surgical code editor. I can ONLY modify the specific function provided. I cannot change anything outside this function.

Error Context:
- Error Type: {location.get('error_type')}
- Error Description: {location.get('error_description')}
- Likely Cause: {location.get('likely_cause')}

Current Function Code:
```
{current_code}
```

CloudWatch Error Log:
{error_log}

My task:
1. Identify the MINIMAL change needed to fix this specific error
2. Make ONLY that change - do not refactor or improve unrelated code
3. Preserve all existing functionality
4. Focus on the root cause identified

Please return a JSON object with this exact structure:
{{
    "fixed_function": "complete fixed function code here",
    "change_description": "Brief description of what was changed",
    "change_type": "ADD|MODIFY|REMOVE",
    "lines_changed": [123, 124, 125]
}}

CRITICAL: 
- Return ONLY the JSON object, no other text
- The fixed_function must be the complete function, not just the changes
- Make the MINIMAL change possible
"""


@tool
def github_file_retriever(file_path: str, function_name: str, repo_name: str) -> str:
    """
    Retrieve current function code from GitHub repository
    
    Args:
        file_path: Path to the file in the repository
        function_name: Name of the function to retrieve
        repo_name: Repository name
    """
    # TODO: Implement actual GitHub file retrieval using MCP tools
    logger.info(f"Retrieving function {function_name} from {file_path} in {repo_name}")
    
    # Placeholder function code for testing
    return f"""def {function_name}(event, context):
    # Current function implementation
    # This would be retrieved from GitHub
    try:
        # Some existing logic here
        return {{'statusCode': 200, 'body': 'Success'}}
    except Exception as e:
        logger.error(f"Error: {{e}}")
        raise e"""


@tool
def pr_creator_tool(surgical_fix: str, repo_name: str) -> str:
    """
    Create targeted PR with surgical fix
    
    Args:
        surgical_fix: JSON string with fix details
        repo_name: Repository name
    """
    try:
        fix_data = json.loads(surgical_fix)
    except:
        return "Error: Could not parse surgical fix data"
    
    pr_title = f"Fix: {fix_data.get('change_description', 'CloudWatch error fix')}"
    pr_description = f"""
## Surgical CloudWatch Error Fix

**Change Type**: {fix_data.get('change_type')}
**Lines Changed**: {fix_data.get('lines_changed')}

**Description**: {fix_data.get('change_description')}

**Fix Applied**:
- Minimal surgical change to address specific CloudWatch error
- No refactoring or unrelated modifications
- Preserves all existing functionality

This is an automated surgical fix generated by the Cloud Engineer system.
"""
    
    # TODO: Use GitHub MCP tools to create actual PR
    logger.info(f"Creating PR: {pr_title}")
    
    return f"""
âœ… Pull Request Created

**Title**: {pr_title}
**URL**: https://github.com/{repo_name}/pull/123
**Branch**: surgical-fix/{repo_name.replace('/', '-')}-{fix_data.get('change_type', 'fix').lower()}

**Summary**: Surgical fix applied with minimal changes to resolve CloudWatch error.
"""


class SurgicalCodeFixer:
    """
    Surgical Code Fixer implemented as an Agent with specialized tools
    """
    
    def __init__(self, bedrock_model: BedrockModel, github_tools: list):
        self.bedrock_model = bedrock_model
        self.github_tools = github_tools
        
        # Create the surgical fixer agent with specialized tools
        self.agent = Agent(
            tools=[
                planner_tool,
                editor_tool,
                github_file_retriever,
                pr_creator_tool
            ],
            model=bedrock_model,
            system_prompt=self._get_system_prompt()
        )
    
    def _get_system_prompt(self) -> str:
        """Get the system prompt for the surgical code fixer agent"""
        return """
You are a Surgical Code Fixer agent that provides Claude-like precision for CloudWatch error fixes.

Your workflow:
1. Use planner_tool to analyze the CloudWatch error and identify exact location
2. Use github_file_retriever to get the current function code
3. Use editor_tool to generate a surgical fix for the specific function
4. Use pr_creator_tool to create a targeted pull request

Key principles:
- SURGICAL PRECISION: Only modify the exact problematic function
- NO REFACTORING: Never improve or optimize unrelated code
- MINIMAL CHANGES: Make the smallest possible fix for the specific error
- PRESERVE FUNCTIONALITY: Maintain all existing functionality

Always work step by step through the tools to ensure precision and accuracy.
"""
    
    def fix_cloudwatch_error(self, error_log: str, repo_name: str) -> Dict[str, Any]:
        """
        Main entry point for surgical code fixing using agentic workflow
        
        Args:
            error_log: CloudWatch error log content
            repo_name: Repository name from CloudWatch tags
            
        Returns:
            Dict with fix results including PR URL
        """
        try:
            logger.info(f"Starting surgical fix for repo: {repo_name}")
            
            # Create the task prompt for the agent
            task_prompt = f"""
Please fix this CloudWatch error using surgical precision:

Repository: {repo_name}
Error Log: {error_log}

Follow the workflow:
1. Analyze the error to identify exact location
2. Retrieve the current function code
3. Generate a surgical fix
4. Create a pull request

Provide a summary of what was done at the end.
"""
            
            # Execute the agent
            response = self.agent(task_prompt)
            
            # Parse the response to extract key information
            response_text = str(response)
            
            # Try to extract PR URL and other details from the response
            pr_url_match = re.search(r'https://github\.com/[^/]+/[^/]+/pull/\d+', response_text)
            pr_url = pr_url_match.group() if pr_url_match else None
            
            return {
                "success": True,
                "response": response_text,
                "pr_url": pr_url,
                "summary": "Surgical fix completed using agentic workflow"
            }
            
        except Exception as e:
            logger.error(f"Surgical fix failed: {e}")
            return {"error": f"Surgical fix failed: {str(e)}"}


def create_surgical_fixer(bedrock_model: BedrockModel, github_tools: list) -> SurgicalCodeFixer:
    """
    Factory function to create a SurgicalCodeFixer instance
    """
    return SurgicalCodeFixer(bedrock_model, github_tools)
